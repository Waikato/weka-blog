<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WEKA Blog</title><link>https://waikato.github.io/weka-blog/</link><description>Stuff around and about WEKA</description><atom:link href="https://waikato.github.io/weka-blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 20 Jun 2024 23:12:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>New WekaDeeplearning4j Release - CNN explorer, saliency maps, progress manager, and model summaries </title><link>https://waikato.github.io/weka-blog/posts/2020-11-26-wekaDeeplearning4j-1.7.0/</link><dc:creator>Rhys Compton</dc:creator><description>&lt;div&gt;&lt;p&gt;A new version of WekaDeeplearning4j, version 1.7.0, is available!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2020-11-26-wekaDeeplearning4j-1.7.0/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><guid>https://waikato.github.io/weka-blog/posts/2020-11-26-wekaDeeplearning4j-1.7.0/</guid><pubDate>Thu, 26 Nov 2020 06:06:00 GMT</pubDate></item><item><title>New WekaDeeplearning4j Release - Pretrained Models, Feature Extraction Update, and more </title><link>https://waikato.github.io/weka-blog/posts/2020-07-04-wekaDeeplearning4j-1.6.0/</link><dc:creator>Eibe Frank</dc:creator><description>&lt;div&gt;&lt;p&gt;A new version of WekaDeeplearning4j, version 1.6.0, has just been released and brings with it a bunch of exciting new features.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2020-07-04-wekaDeeplearning4j-1.6.0/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><guid>https://waikato.github.io/weka-blog/posts/2020-07-04-wekaDeeplearning4j-1.6.0/</guid><pubDate>Sat, 04 Jul 2020 06:06:00 GMT</pubDate></item><item><title>Weka Debian packages</title><link>https://waikato.github.io/weka-blog/posts/2019-09-23-weka-debian-packages/</link><dc:creator>FracPete</dc:creator><description>&lt;div&gt;&lt;p&gt;Users installing Weka on Linux must have always felt left out
a bit, with no installer available, instead having to deal with
just a ZIP file. For power users, that would not have mattered,
but users new to Linux may have found that a bit more challenging.&lt;/p&gt;
&lt;p&gt;Well, things have changed - at least for users of Debian or
one of its many derivatives like Ubuntu - with the advent
of &lt;a class="reference external" href="https://www.cs.waikato.ac.nz/~ml/weka/snapshots/weka_snapshots.html"&gt;snapshots&lt;/a&gt;
being available for download as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deb_%28file_format%29"&gt;Debian packages&lt;/a&gt; (stable 3.8 and developer version).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2019-09-23-weka-debian-packages/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><guid>https://waikato.github.io/weka-blog/posts/2019-09-23-weka-debian-packages/</guid><pubDate>Mon, 23 Sep 2019 01:21:00 GMT</pubDate></item><item><title>Jupyter notebooks (on Windows)</title><link>https://waikato.github.io/weka-blog/posts/2019-04-02-jupyter-windows/</link><dc:creator>Peter Reutemann</dc:creator><description>&lt;div&gt;&lt;p&gt;In the previous &lt;a class="reference external" href="https://waikato.github.io/weka-blog/posts/2019-03-29-jupyter/"&gt;post&lt;/a&gt;, I quickly
described how to set up Jupyter Notebooks to run Java code. Now I want
to explain how to set things up on Windows using
&lt;a class="reference external" href="https://www.anaconda.com/"&gt;Anaconda&lt;/a&gt;. Of course, you have to have
a Java 9 JDK or later installed on your system, as the JDK's &lt;em&gt;JShell&lt;/em&gt;
feature is required to execute the Java code on the fly.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2019-04-02-jupyter-windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>scripting</category><guid>https://waikato.github.io/weka-blog/posts/2019-04-02-jupyter-windows/</guid><pubDate>Tue, 02 Apr 2019 00:44:00 GMT</pubDate></item><item><title>Jupyter notebooks</title><link>https://waikato.github.io/weka-blog/posts/2019-03-29-jupyter/</link><dc:creator>Peter Reutemann</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://jupyter.org/"&gt;Jupyter notebooks&lt;/a&gt; are extremely popular in the
Python world, simply because it is great to combine documentation and
code in a visually appealing way. Makes it an ideal tool for teaching!&lt;/p&gt;
&lt;p&gt;A recent post on the &lt;a class="reference external" href="https://moa.cms.waikato.ac.nz/how-to-use-jupyter-notebooks-with-moa/"&gt;MOA blog&lt;/a&gt;, demonstrated the &lt;a class="reference external" href="https://github.com/SpencerPark/IJava"&gt;IJava kernel&lt;/a&gt; for executing Java scripts. The kernel relies on the Java JDK 9+ feature
called &lt;em&gt;JShell&lt;/em&gt;, which allows executing Java code without compiling it
first.&lt;/p&gt;
&lt;p&gt;Rather than using &lt;em&gt;mybinder.org&lt;/em&gt;, I was intrigued how easy it would be
to run it on ones local machine. As it turns out, extremely easy!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2019-03-29-jupyter/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>scripting</category><guid>https://waikato.github.io/weka-blog/posts/2019-03-29-jupyter/</guid><pubDate>Fri, 29 Mar 2019 01:04:00 GMT</pubDate></item><item><title>Bookmarks support</title><link>https://waikato.github.io/weka-blog/posts/2019-03-01-bookmarks/</link><dc:creator>Peter Reutemann</dc:creator><description>&lt;div&gt;&lt;p&gt;One long-standing annoyance in Weka's user interface was the
opening and saving of files: you needed to click many times
before you reached your destination. The only thing you were
able to modify, for example for the Explorer, was the &lt;em&gt;initial
directory&lt;/em&gt; a file chooser was using (&lt;a class="reference external" href="https://github.com/Waikato/weka-trunk/blob/master/weka/src/main/java/weka/gui/explorer/Explorer.props"&gt;Explorer.props&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, your datasets are usually distributed, especially
when you are working on many projects, which renders a
single starting directory ineffective, unfortunately.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2019-03-01-bookmarks/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>gui</category><guid>https://waikato.github.io/weka-blog/posts/2019-03-01-bookmarks/</guid><pubDate>Thu, 28 Feb 2019 23:10:00 GMT</pubDate></item><item><title>Micro averages in multi-class classification</title><link>https://waikato.github.io/weka-blog/posts/2019-02-16-micro_average/</link><dc:creator>Eibe Frank</dc:creator><description>&lt;div&gt;&lt;p&gt;When evaluating multi-class classification models, Weka outputs a weighted average of the per-class precision, recall, and F-measure: it computes these statistics for each class individually, treating the corresponding class as the "positive" class and the union of the other classes as the negative class, and computes a weighted average of these per-class statistics, with a per-class weight that is equal to the proportion of data in that class. A recent question on the Weka mailing list was whether the software also outputs micro-averaged precision, recall, and F-measure for multi-class problems. It turns out that it does! To find out where these can be found, read on.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2019-02-16-micro_average/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><guid>https://waikato.github.io/weka-blog/posts/2019-02-16-micro_average/</guid><pubDate>Sat, 16 Feb 2019 01:48:00 GMT</pubDate></item><item><title>Oversampling and Undersampling</title><link>https://waikato.github.io/weka-blog/posts/2019-01-30-sampling/</link><dc:creator>Eibe Frank</dc:creator><description>&lt;div&gt;&lt;p&gt;A frequent question of Weka users is how to implement oversampling or undersampling, which are two common strategies for dealing with imbalanced classes in classification problems. This post provides some explanation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2019-01-30-sampling/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><guid>https://waikato.github.io/weka-blog/posts/2019-01-30-sampling/</guid><pubDate>Tue, 29 Jan 2019 23:10:00 GMT</pubDate></item><item><title>Making a Weka classifier</title><link>https://waikato.github.io/weka-blog/posts/2018-10-08-making-a-weka-classifier/</link><dc:creator>eibe</dc:creator><description>&lt;div&gt;&lt;p&gt;One role of the Weka software is to provide users with the opportunity to implement machine learning algorithms without having to deal with data import and evaluation issues: when a classifier has been written as a Java class that implements a couple of standard methods defined in the Weka framework, all the goodies that come with Weka are automatically applicable to it, and it will automatically show up in Weka's graphical user interfaces. To see what needs to be done, read on!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2018-10-08-making-a-weka-classifier/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>github</category><guid>https://waikato.github.io/weka-blog/posts/2018-10-08-making-a-weka-classifier/</guid><pubDate>Mon, 08 Oct 2018 04:02:00 GMT</pubDate></item><item><title>Weka-Kt: Kotlin Extensions for Weka</title><link>https://waikato.github.io/weka-blog/posts/2018-06-22-wekakotlin/</link><dc:creator>Steven Lang </dc:creator><description>&lt;div&gt;&lt;figure&gt;
&lt;a class="reference external image-reference" href="https://github.com/steven-lang/weka-kt"&gt;
&lt;img alt="Weka-Kt: Kotlin Extensions for Weka" src="https://raw.githubusercontent.com/steven-lang/weka-kt/master/resources/Weka_3_kotlin_full.png" style="width: 300px;"&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;section id="kotlin-extensions-for-weka"&gt;
&lt;h2&gt;Kotlin Extensions for Weka&lt;/h2&gt;
&lt;p&gt;Kotlin is a statically typed programming language for modern multiplatform applications running on the Java Virtual Machine. Its design philosophy is to be a concise and type-safe (e.g. support for non-nullable types) programming language. It supports both object-oriented and functional constructs. Other features include smart casting, operator overloading, higher-order functions, lambdas, and &lt;a class="reference external" href="https://kotlinlang.org/docs/reference/extensions.html"&gt;extensions&lt;/a&gt;. The latter has led to the formation of a group of Kotlin extension libraries that primarily focuses on the syntactic improvement of other libraries' usages. A key example is &lt;a class="reference external" href="https://github.com/android/android-ktx"&gt;Android KTX&lt;/a&gt; library, developed by Google, which provides extensions for the Android framework. The purpose of this is to make Android development with Kotlin more concise, pleasant and idiomatic.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://waikato.github.io/weka-blog/posts/2018-06-22-wekakotlin/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;</description><category>kotlin</category><guid>https://waikato.github.io/weka-blog/posts/2018-06-22-wekakotlin/</guid><pubDate>Thu, 21 Jun 2018 20:00:00 GMT</pubDate></item></channel></rss>